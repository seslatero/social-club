schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
whether this query should be cached (Hasura Cloud only)
"""
directive @cached(
  """
  measured in seconds
  """
  ttl: Int! = 60

  """
  refresh the cache entry
  """
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """
  does the column match the given case-insensitive pattern
  """
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """
  does the column match the given pattern
  """
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """
  does the column NOT match the given case-insensitive pattern
  """
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """
  does the column NOT match the given pattern
  """
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """
  does the column NOT match the given SQL regular expression
  """
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """
  does the column match the given SQL regular expression
  """
  _similar: String
}

"""
ordering argument of a cursor
"""
enum cursor_ordering {
  """
  ascending ordering of the cursor
  """
  ASC

  """
  descending ordering of the cursor
  """
  DESC
}

"""
Credits or debits to the account
"""
type items {
  amount: Int!
  created_at: timestamptz!
  created_by: String!
  id: uuid!
}

"""
aggregated selection of "items"
"""
type items_aggregate {
  aggregate: items_aggregate_fields
  nodes: [items!]!
}

"""
aggregate fields of "items"
"""
type items_aggregate_fields {
  avg: items_avg_fields
  count(columns: [items_select_column!], distinct: Boolean): Int!
  max: items_max_fields
  min: items_min_fields
  stddev: items_stddev_fields
  stddev_pop: items_stddev_pop_fields
  stddev_samp: items_stddev_samp_fields
  sum: items_sum_fields
  var_pop: items_var_pop_fields
  var_samp: items_var_samp_fields
  variance: items_variance_fields
}

"""
aggregate avg on columns
"""
type items_avg_fields {
  amount: Float
}

"""
Boolean expression to filter rows from the table "items". All fields are combined with a logical 'AND'.
"""
input items_bool_exp {
  _and: [items_bool_exp!]
  _not: items_bool_exp
  _or: [items_bool_exp!]
  amount: Int_comparison_exp
  created_at: timestamptz_comparison_exp
  created_by: String_comparison_exp
  id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "items"
"""
enum items_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  items_pkey
}

"""
input type for incrementing numeric columns in table "items"
"""
input items_inc_input {
  amount: Int
}

"""
input type for inserting data into table "items"
"""
input items_insert_input {
  amount: Int
  created_at: timestamptz
  created_by: String
  id: uuid
}

"""
aggregate max on columns
"""
type items_max_fields {
  amount: Int
  created_at: timestamptz
  created_by: String
  id: uuid
}

"""
aggregate min on columns
"""
type items_min_fields {
  amount: Int
  created_at: timestamptz
  created_by: String
  id: uuid
}

"""
response of any mutation on the table "items"
"""
type items_mutation_response {
  """
  number of rows affected by the mutation
  """
  affected_rows: Int!

  """
  data from the rows affected by the mutation
  """
  returning: [items!]!
}

"""
on_conflict condition type for table "items"
"""
input items_on_conflict {
  constraint: items_constraint!
  update_columns: [items_update_column!]! = []
  where: items_bool_exp
}

"""
Ordering options when selecting data from "items".
"""
input items_order_by {
  amount: order_by
  created_at: order_by
  created_by: order_by
  id: order_by
}

"""
primary key columns input for table: items
"""
input items_pk_columns_input {
  id: uuid!
}

"""
select columns of table "items"
"""
enum items_select_column {
  """
  column name
  """
  amount

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id
}

"""
input type for updating data in table "items"
"""
input items_set_input {
  amount: Int
  created_at: timestamptz
  created_by: String
  id: uuid
}

"""
aggregate stddev on columns
"""
type items_stddev_fields {
  amount: Float
}

"""
aggregate stddev_pop on columns
"""
type items_stddev_pop_fields {
  amount: Float
}

"""
aggregate stddev_samp on columns
"""
type items_stddev_samp_fields {
  amount: Float
}

"""
Streaming cursor of the table "items"
"""
input items_stream_cursor_input {
  """
  Stream column input with initial value
  """
  initial_value: items_stream_cursor_value_input!

  """
  cursor ordering
  """
  ordering: cursor_ordering
}

"""
Initial value of the column from where the streaming should start
"""
input items_stream_cursor_value_input {
  amount: Int
  created_at: timestamptz
  created_by: String
  id: uuid
}

"""
aggregate sum on columns
"""
type items_sum_fields {
  amount: Int
}

"""
update columns of table "items"
"""
enum items_update_column {
  """
  column name
  """
  amount

  """
  column name
  """
  created_at

  """
  column name
  """
  created_by

  """
  column name
  """
  id
}

input items_updates {
  """
  increments the numeric columns with given value of the filtered values
  """
  _inc: items_inc_input

  """
  sets the columns of the filtered rows to the given values
  """
  _set: items_set_input

  """
  filter the rows which have to be updated
  """
  where: items_bool_exp!
}

"""
aggregate var_pop on columns
"""
type items_var_pop_fields {
  amount: Float
}

"""
aggregate var_samp on columns
"""
type items_var_samp_fields {
  amount: Float
}

"""
aggregate variance on columns
"""
type items_variance_fields {
  amount: Float
}

"""
mutation root
"""
type mutation_root {
  """
  delete data from the table: "items"
  """
  delete_items(
    """
    filter the rows which have to be deleted
    """
    where: items_bool_exp!
  ): items_mutation_response

  """
  delete single row from the table: "items"
  """
  delete_items_by_pk(id: uuid!): items

  """
  insert data into the table: "items"
  """
  insert_items(
    """
    the rows to be inserted
    """
    objects: [items_insert_input!]!

    """
    upsert condition
    """
    on_conflict: items_on_conflict
  ): items_mutation_response

  """
  insert a single row into the table: "items"
  """
  insert_items_one(
    """
    the row to be inserted
    """
    object: items_insert_input!

    """
    upsert condition
    """
    on_conflict: items_on_conflict
  ): items

  """
  update data of the table: "items"
  """
  update_items(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: items_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: items_set_input

    """
    filter the rows which have to be updated
    """
    where: items_bool_exp!
  ): items_mutation_response

  """
  update single row of the table: "items"
  """
  update_items_by_pk(
    """
    increments the numeric columns with given value of the filtered values
    """
    _inc: items_inc_input

    """
    sets the columns of the filtered rows to the given values
    """
    _set: items_set_input
    pk_columns: items_pk_columns_input!
  ): items

  """
  update multiples rows of table: "items"
  """
  update_items_many(
    """
    updates to execute, in order
    """
    updates: [items_updates!]!
  ): [items_mutation_response]
}

"""
column ordering options
"""
enum order_by {
  """
  in ascending order, nulls last
  """
  asc

  """
  in ascending order, nulls first
  """
  asc_nulls_first

  """
  in ascending order, nulls last
  """
  asc_nulls_last

  """
  in descending order, nulls first
  """
  desc

  """
  in descending order, nulls first
  """
  desc_nulls_first

  """
  in descending order, nulls last
  """
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "items"
  """
  items(
    """
    distinct select on columns
    """
    distinct_on: [items_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [items_order_by!]

    """
    filter the rows returned
    """
    where: items_bool_exp
  ): [items!]!

  """
  fetch aggregated fields from the table: "items"
  """
  items_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [items_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [items_order_by!]

    """
    filter the rows returned
    """
    where: items_bool_exp
  ): items_aggregate!

  """
  fetch data from the table: "items" using primary key columns
  """
  items_by_pk(id: uuid!): items
}

type subscription_root {
  """
  fetch data from the table: "items"
  """
  items(
    """
    distinct select on columns
    """
    distinct_on: [items_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [items_order_by!]

    """
    filter the rows returned
    """
    where: items_bool_exp
  ): [items!]!

  """
  fetch aggregated fields from the table: "items"
  """
  items_aggregate(
    """
    distinct select on columns
    """
    distinct_on: [items_select_column!]

    """
    limit the number of rows returned
    """
    limit: Int

    """
    skip the first n rows. Use only with order_by
    """
    offset: Int

    """
    sort the rows by one or more columns
    """
    order_by: [items_order_by!]

    """
    filter the rows returned
    """
    where: items_bool_exp
  ): items_aggregate!

  """
  fetch data from the table: "items" using primary key columns
  """
  items_by_pk(id: uuid!): items

  """
  fetch data from the table in a streaming manner: "items"
  """
  items_stream(
    """
    maximum number of rows returned in a single batch
    """
    batch_size: Int!

    """
    cursor to stream the results returned by the query
    """
    cursor: [items_stream_cursor_input]!

    """
    filter the rows returned
    """
    where: items_bool_exp
  ): [items!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}
